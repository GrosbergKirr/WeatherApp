// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/get_cities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get list of available cities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Number of items per page",
                        "name": "per_page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cities",
                        "schema": {
                            "$ref": "#/definitions/models.CitiesListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/get_full_forecast": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get list of available cities",
                "parameters": [
                    {
						"example": "{\"city\": \"Minsk\", \"date\": \"2024-07-12 12:00:00\"}",
                        "description": "Name of city and date of full forecast",
                        "name": "City\u0026Date",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FullForecastRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full forecast",
                        "schema": {
                            "$ref": "#/definitions/models.Record"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/get_short_forecast": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get list of available cities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of city",
                        "name": "city",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Short forecast",
                        "schema": {
                            "$ref": "#/definitions/models.ShortForecastResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CitiesListResponse": {
            "type": "object",
            "properties": {
                "cities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Clouds": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "integer"
                }
            }
        },
        "models.FullForecastRequest": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "models.MainInfo": {
            "type": "object",
            "properties": {
                "feels_like": {
                    "type": "number"
                },
                "grnd_level": {
                    "type": "integer"
                },
                "humidity": {
                    "type": "integer"
                },
                "pressure": {
                    "type": "integer"
                },
                "sea_level": {
                    "type": "integer"
                },
                "temp": {
                    "type": "number"
                },
                "temp_kf": {
                    "type": "number"
                },
                "temp_max": {
                    "type": "number"
                },
                "temp_min": {
                    "type": "number"
                }
            }
        },
        "models.Rain": {
            "type": "object",
            "properties": {
                "3h": {
                    "type": "number"
                }
            }
        },
        "models.Record": {
            "type": "object",
            "properties": {
                "clouds": {
                    "$ref": "#/definitions/models.Clouds"
                },
                "dt": {
                    "type": "integer"
                },
                "dt_txt": {
                    "type": "string"
                },
                "bin": {
                    "$ref": "#/definitions/models.MainInfo"
                },
                "pop": {
                    "type": "number"
                },
                "rain": {
                    "$ref": "#/definitions/models.Rain"
                },
                "sys": {
                    "$ref": "#/definitions/models.Sys"
                },
                "visibility": {
                    "type": "integer"
                },
                "weather": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.WeatherGet"
                    }
                },
                "wind": {
                    "$ref": "#/definitions/models.Wind"
                }
            }
        },
        "models.ShortForecastResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "dates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "meanTemp": {
                    "type": "number"
                }
            }
        },
        "models.Sys": {
            "type": "object",
            "properties": {
                "pod": {
                    "type": "string"
                }
            }
        },
        "models.WeatherGet": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "bin": {
                    "type": "string"
                }
            }
        },
        "models.Wind": {
            "type": "object",
            "properties": {
                "deg": {
                    "type": "integer"
                },
                "gust": {
                    "type": "number"
                },
                "speed": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Weather app swagger",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
